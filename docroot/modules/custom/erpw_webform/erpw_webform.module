<?php

/**
 * @file
 */

use Drupal\webform\Entity\Webform;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\user\Entity\User;

/**
 * @file
 * Contains erpw_webform.module.
 */

/**
 * Implements hook_webform_add_form().
 */
function erpw_webform_webform_add_form(array &$form, FormStateInterface $form_state, $webform_type = NULL) {
  // Load the appropriate webform template.
  if ($webform_type == 'default') {
    $webform = Webform::create([]);
  }
  elseif ($webform_type == 'eRPW') {
    $webform = Webform::create([
      'template' => 'template_erpw_workflow',
    ]);
  }

  // Set the webform values.
  $form_state->set('webform', $webform);
  $form_state->set('template', $webform->get('template')->value);

  // Build the webform form.
  $form_object = \Drupal::entityTypeManager()
    ->getFormObject('webform', 'default')
    ->setEntity($webform);
  $form = \Drupal::formBuilder()->getForm($form_object);

  return $form;
}

/**
 * Implements hook_entity_type_build().
 */
function erpw_webform_entity_type_build(array &$entity_types) {

  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */

  // Add a form for a custom node form without overriding the default
  // node form. To override the default node form, use hook_entity_type_alter().
  $entity_types['webform']->setFormClass('duplicate', 'Drupal\erpw_webform\Form\WebformAddForm');
  $entity_types['webform']->setFormClass('add', 'Drupal\erpw_webform\Form\WebformAddForm');
}

/**
 * Implements hook_preprocess_html().
 */
function erpw_webform_preprocess_html(&$variables) {
  $currentRoute = \Drupal::routeMatch()->getRouteName();
  if ($currentRoute == 'erpw_webform.service_content') {
    $variables['attributes']['class'][] = 'view-page-webform-submission';
  }
}

/**
 * Implements hook_preprocess_page().
 */
function erpw_webform_preprocess_page(&$variables) {
  $currentRoute = \Drupal::routeMatch()->getRouteName();
  if ($currentRoute == "entity.webform.canonical" || $currentRoute == 'entity.webform_submission.edit_form' || $currentRoute == 'erpw_webform.service_content') {
    $variables['#attached']['library'][] = 'erpw_webform/erpw_webform_js';
  }
}

/**
 * Implements hook_entity_insert().
 */
function erpw_webform_entity_insert(EntityInterface $entity) {
  // Check if the entity is a Webform.
  if ($entity->getEntityTypeId() == 'webform') {
    // Enable content locking for the new webform.
    $webform_id = $entity->id();

    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('content_lock.settings');
    $webforms_array = $config->get('types')['webform_submission'];
    $webforms_array[$webform_id] = $webform_id;
    $config->set('types', ['webform_submission' => $webforms_array]);
    $config->save();

    // Cache the url of the webform.
    $url = $entity->toUrl()->setAbsolute()->toString();
    $path = preg_replace('/^\/\w{2}\b/', '', parse_url($url, PHP_URL_PATH));
    // Get the PWA URLs to cache configuration object.
    $configFactory = \Drupal::service('config.factory');
    $config = $configFactory->getEditable('pwa.config');
    // Get the current URLs to cache array.
    $urls_to_cache = $config->get('urls_to_cache');
    $urls_to_cache = explode("\r\n", $urls_to_cache);
    $urls_to_cache[] = $path;
    $urls_to_cache = implode("\r\n", $urls_to_cache);
    // Add the webform URL to the URLs to cache array if it's not already present.
    // Save the updated URLs to cache array.
    $config->set('urls_to_cache', $urls_to_cache)->save();
  }
}

/**
 * Implements hook_theme().
 */
function erpw_webform_composite_theme() {
  return [
    'location_list' => [
      'render element' => 'element',
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function erpw_webform_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Check if this is the webform submission edit form.
  $currentRoute = \Drupal::routeMatch()->getRouteName();
  if ($currentRoute == 'entity.webform_submission.edit_form') {
    // Set default values for the 'field_name' and 'field_email' fields.
    $elements = $form['elements'];
    foreach ($elements as $element) {
      if ($element["#type"] == "location_list_element" && isset($element["#default_value"])) {
        $form['#attached']['drupalSettings']['erpw_webform']['default_location_values'] = $element["#default_value"];
      }
    }
  }

}

/**
 * Implements hook_views_data_alter().
 */
function erpw_webform_views_data_alter(array &$data) {
  $data['webform_submission']['webform_submission_focal_point_field'] = [
    'title' => t('Webform Submission Focal Point field.'),
    'help' => t('Generic field for displaying focal point name for all submissions.'),
    'field' => [
      'id' => 'webform_submission_focal_point_field',
      'entity type' => 'webform_submission',
      'label' => t('Webform Submission Focal Point field.'),
      'real field' => 'webform_submission_focal_point_field',
    ],
  ];

  return $data;
}

/**
 * Implements hook_entity_operation_alter().
 */
function erpw_webform_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'webform_submission') {
    // Add custom operation.
    $sid = $entity->get('sid')->getValue()[0]['value'];
    $operations['view']['url'] = Url::fromRoute('erpw_webform.service_content', ['webform_submission' => intval($sid)]);
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function erpw_webform_menu_local_tasks_alter(&$data, $route_name) {
  // Override local task links for webform submissions.
  foreach ($data as $key => $value) {
    if ($key == 'tabs') {
      foreach ($value as $subKey => $routes) {
        foreach ($routes as $route_name => $properties) {
          if ($route_name == 'entity.webform_submission.canonical') {
            $sid = intval($properties['#link']['url']->getRouteParameters()['webform_submission']);
            $data[$key][$subKey][$route_name]['#link']['url'] = Url::fromRoute('erpw_webform.service_content', ['webform_submission' => intval($sid)]);
          }
          if ($route_name == 'entity.webform_submission.notes_form') {
            unset($data[$key][$subKey][$route_name]);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_menu_views_pre_render().
 */
function erpw_webform_views_pre_render(&$view) {
  if ($view->id() == 'webform_submissions') {
    foreach ($view->result as $key => $row) {
      $sid = $row->sid;
      $keys_exists = [];
      $keys_na = [];
      $user = User::load(\Drupal::currentUser()->id());
      $user_roles = $user->getRoles();
      $domainAccess = $user->get('field_domain_access')->getValue();
      $webformSubmission = \Drupal::entityTypeManager()->getStorage('webform_submission')->load($sid);
      $webformID = $webformSubmission->get('webform_id')->getValue()[0]['target_id'];
      $webform = \Drupal::entityTypeManager()->getStorage('webform')->load($webformID);
      $tpa = $webform->getThirdPartySetting('erpw_webform', 'webform_service_type_map');
      foreach ($user_roles as $key_r => $role) {
        if ($role == "super_admin" ||$role == "administrator") {
          return;
        }
        else {
          foreach ($domainAccess as $domain) {
            if (array_key_exists($domain['target_id'], $tpa)) {
              dump($tpa);
              $keys_exists[] = $key;
            }
            else {
              dump("NA");
              dump($tpa);
              $keys_na[] = $key;
            }
          }
        }
      }
    }
    dump($keys_exists);
    dump($keys_na);
    // foreach ($view->result as $key => $row) {
    //   if (!isset($keys[$key])) {
    //     unset($view->result[$key]);
    //   }
    // }
  }

  return $view;
}
